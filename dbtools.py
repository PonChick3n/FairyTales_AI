from config import get_async_connection
from typing import Any, Optional
import asyncio

async def get_user_field(user_id: int, field_name: str) -> Optional[Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è field_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º user_id.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ NULL ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    allowed_fields = {"sex", "age", "hobby", "menu", "name", "last_message "}
    if field_name not in allowed_fields:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â—ë–Ω")
    sql = f"SELECT {field_name} FROM users WHERE user_id = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (user_id,))
            row = await cursor.fetchone()
            return row[0] if row else None
    finally:
        try:
            conn.close()
        except:
            pass

async def get_tale_field(tale_num: int, field_name: str) -> Optional[Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è field_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º tale_num –≤ —Ç–∞–±–ª–∏—Ü–µ tales.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ NULL ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    allowed_fields = {"tale_size", "cur_stage", "genre"}
    if field_name not in allowed_fields:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â—ë–Ω")
    
    sql = f"SELECT {field_name} FROM tales WHERE tale_num = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (tale_num,))
            row = await cursor.fetchone()
            return row[0] if row else None
    finally:
        try:
            conn.close()
        except:
            pass

async def fetch_current_db():
    try:
        conn = await get_async_connection()
        if conn is None:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (conn is None)")
            return

        async with conn.cursor() as cursor:
            await cursor.execute("SELECT DATABASE();")
            result = await cursor.fetchone()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {result[0]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π: {e}")
    finally:
        if conn:
            conn.close()

async def add_user(user_id: int, sex: str, age: int, hobby: str, menu: int, name: str, last_message: int):
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("""
            INSERT INTO users (user_id, sex, age, hobby, menu, name, last_message)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE sex=%s, age=%s, hobby=%s, menu=%s, name=%s, last_message=%s
        """, (user_id, sex, age, hobby, menu, name, last_message, sex, age, hobby, menu, name, last_message))
    conn.close()

async def update_user_field(user_id: int, field: str, value):
    allowed_fields = {'sex', 'age', 'hobby', 'menu', 'name', 'last_message'}
    if field not in allowed_fields:
        raise ValueError(f"Field '{field}' is not allowed to be updated.")

    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        query = f"UPDATE users SET {field} = %s WHERE user_id = %s"
        await cursor.execute(query, (value, user_id))
    conn.close()

async def update_tale_field(tale_num: int, field_name: str, new_value: Any) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è field_name –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º tale_num –≤ —Ç–∞–±–ª–∏—Ü–µ tales.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏ False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    allowed_fields = {"tale_size", "cur_stage", "genre"}
    if field_name not in allowed_fields:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â—ë–Ω")

    sql = f"UPDATE tales SET {field_name} = %s WHERE tale_num = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (new_value, tale_num))
            return cursor.rowcount > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False
    finally:
        conn.close()

async def user_exists(user_id: int) -> bool:
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT 1 FROM users WHERE user_id = %s LIMIT 1", (user_id,))
        result = await cursor.fetchone()
    conn.close()
    return result is not None

async def get_tale_num(user_id: int, tale_size: int, cur_stage: int, genre: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫.
    –ù–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚Äî —ç—Ç–æ –∑–∞–ø–∏—Å—å, —É –∫–æ—Ç–æ—Ä–æ–π cur_stage < tale_size.
    –ï—Å–ª–∏ —Ç–∞–∫–∞—è —Å–∫–∞–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID.
    """
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT tale_num
                FROM tales
                WHERE user_id = %s
                  AND cur_stage < tale_size
                LIMIT 1
                """,
                (user_id,)
            )
            unfinished = await cursor.fetchone()
            if unfinished:
                return unfinished[0]
            await cursor.execute(
                """
                INSERT INTO tales (user_id, tale_size, cur_stage, genre)
                VALUES (%s, %s, %s, %s)
                """,
                (user_id, tale_size, cur_stage, genre)
            )
            await cursor.execute("SELECT LAST_INSERT_ID()")
            result = await cursor.fetchone()
            return result[0]
    finally:
        conn.close()

async def check_all_users():
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT * FROM users")
        result = await cursor.fetchall()
        for row in result:
            print(row)
    conn.close()

async def add_small_tale_if_not(tale_num: int):
    conn = await get_async_connection()
    if not conn:
        print("üõë –û—à–∏–±–∫–∞: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return

    try:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT tale_num FROM small_tale WHERE tale_num = %s", (tale_num,))
            if not await cursor.fetchone():
                print(f"–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è tale_num={tale_num}")
                try:
                    await cursor.execute("INSERT INTO small_tale (tale_num) VALUES (%s)", (tale_num,))
                    await conn.commit()
                    print(f"–ó–∞–ø–∏—Å—å —Å tale_num={tale_num} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
                except Exception as insert_error:
                    print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {insert_error}")
                    await conn.rollback()
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if conn and not conn.closed:
            conn.close()
            print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è tale_num={tale_num} –∑–∞–∫—Ä—ã—Ç–æ")

async def add_data_to_small_tale(tale_num: int, text: str):
    conn = await get_async_connection()
    if not conn:
        print("üõë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        return

    try:
        async with conn.cursor() as cursor:
            # –ë–µ—Ä—ë–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
            await cursor.execute("SELECT * FROM small_tale WHERE tale_num = %s", (tale_num,))
            result = await cursor.fetchone()
            if not result:
                print(f"‚ö† –ó–∞–ø–∏—Å—å {tale_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
            fields = [
                'p0', 'ans0', 'p1', 'ans1', 'p2', 'ans2',
                'p3', 'ans3', 'p4', 'ans4', 'p5', 'ans5',
                'p6', 'ans6', 'p7', 'ans7'
            ]

            # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –∏ –∑–∞–ø–∏—à–µ–º –≤ –Ω–µ–≥–æ
            updated = False
            for idx, field in enumerate(fields, start=1):
                if result[idx] is None:
                    await cursor.execute(
                        f"UPDATE small_tale SET {field} = %s WHERE tale_num = %s",
                        (text, tale_num)
                    )
                    updated = True
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {field}")
                    break

            if updated:
                await conn.commit()
                print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                print("‚Ñπ –í—Å–µ –ø–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
    finally:
        if conn and not conn.closed:
            conn.close()


async def get_user_context_small_tale(tale_num: int):
    conn = await get_async_connection()
    context = []
    try:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT * FROM small_tale WHERE tale_num = %s", (tale_num,))
            result = await cursor.fetchone()
            if not result:
                print(f"Record with tale_num {tale_num} does not exist.")
                return []
            fields = [
                'p0', 'ans0', 'p1', 'ans1', 'p2', 'ans2',
                'p3', 'ans3', 'p4', 'ans4', 'p5', 'ans5',
                'p6', 'ans6', 'p7', 'ans7'
            ]
            for i, field in enumerate(fields):
                cell = result[i+1]
                if cell is not None:
                    role = "user" if i % 2 == 0 else "assistant"
                    context.append({"role": role, "content": cell})
    finally:
        conn.close()

    return context

async def print_table(table_name: str):
    conn = await get_async_connection()
    async with conn.cursor() as cur:
        await cur.execute(f"SELECT * FROM {table_name}")
        rows = await cur.fetchall()
        headers = [desc[0] for desc in cur.description]

    MAX_CELL_WIDTH = 5
    col_widths = [MAX_CELL_WIDTH] * len(headers)

    def make_line(char="-", junction="+"):
        return junction + junction.join(char * (w + 2) for w in col_widths) + junction

    def format_row(row):
        return "| " + " | ".join(
            (str(cell) if cell is not None else "NULL")[:MAX_CELL_WIDTH].ljust(MAX_CELL_WIDTH)
            for cell in row
        ) + " |"

    print(f"mysql> SELECT * FROM {table_name};")
    print(make_line())
    print(format_row(headers))
    print(make_line())
    for row in rows:
        await asyncio.sleep(0)
        print(format_row(row))
    print(make_line())
