from config import get_async_connection
from typing import Any, Optional
import asyncio

async def get_user_field(user_id: int, field_name: str) -> Optional[Any]:
    allowed_fields = {"sex", "age", "hobby", "menu", "name", "last_message", "cur_tale"}
    if field_name not in allowed_fields:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â—ë–Ω")
    sql = f"SELECT {field_name} FROM users WHERE user_id = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (user_id,))
            row = await cursor.fetchone()
            return row[0] if row else None
    finally:
        try:
            conn.close()
        except:
            pass

async def get_tales_field(tale_num: int, field_name: str) -> Optional[Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è field_name –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º tale_num –≤ —Ç–∞–±–ª–∏—Ü–µ tales.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ NULL ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    allowed_fields = {"tale_size", "cur_stage", "genre", "hero", "moral"}
    if field_name not in allowed_fields:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â—ë–Ω")

    sql = f"SELECT {field_name} FROM tales WHERE tale_num = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (tale_num,))
            row = await cursor.fetchone()
            return row[0] if row else None
    finally:
        try:
            conn.close()
        except:
            pass

async def fetch_current_db():
    try:
        conn = await get_async_connection()
        if conn is None:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (conn is None)")
            return

        async with conn.cursor() as cursor:
            await cursor.execute("SELECT DATABASE();")
            result = await cursor.fetchone()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {result[0]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π: {e}")
    finally:
        if conn:
            conn.close()

async def add_user(user_id: int, sex: str, age: int, hobby: str, menu: int, name: str, last_message: int, cur_tale: int = 0):
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("""
            INSERT INTO users (user_id, sex, age, hobby, menu, name, last_message, cur_tale)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE sex=%s, age=%s, hobby=%s, menu=%s, name=%s, last_message=%s, cur_tale=%s
        """, (user_id, sex, age, hobby, menu, name, last_message, cur_tale,
              sex, age, hobby, menu, name, last_message, cur_tale))
    conn.close()

async def update_user_field(user_id: int, field: str, value):
    allowed_fields = {'sex', 'age', 'hobby', 'menu', 'name', 'last_message', 'cur_tale'}
    if field not in allowed_fields:
        raise ValueError(f"Field '{field}' is not allowed to be updated.")

    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        query = f"UPDATE users SET {field} = %s WHERE user_id = %s"
        await cursor.execute(query, (value, user_id))
        print(f"‚úÖ–ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ user")
    conn.close()

async def update_tales_field(tale_num: int, field_name: str, new_value: Any) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è field_name –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º tale_num –≤ —Ç–∞–±–ª–∏—Ü–µ tales.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ (–∑–∞—Ç—Ä–æ–Ω—É—Ç–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞),
    –∏ False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    allowed_fields = {"tale_size", "cur_stage", "genre", "hero", "moral"}
    if field_name not in allowed_fields:
        raise ValueError(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è {field_name} –∑–∞–ø—Ä–µ—â–µ–Ω–æ")

    sql = f"UPDATE tales SET {field_name} = %s WHERE tale_num = %s;"
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(sql, (new_value, tale_num))
            return cursor.rowcount > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ tales.{field_name}: {e}")
        return False
    finally:
        try:
            conn.close()
        except:
            pass

async def user_exists(user_id: int) -> bool:
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT 1 FROM users WHERE user_id = %s LIMIT 1", (user_id,))
        result = await cursor.fetchone()
    conn.close()
    return result is not None

async def get_tales_num(user_id: int) -> Optional[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tale_num –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ cur_stage != tale_size).
    –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT tale_num
                  FROM tales
                 WHERE user_id = %s
                   AND cur_stage IS NOT NULL
                   AND tale_size IS NOT NULL
                   AND cur_stage < tale_size
                 LIMIT 1
                """,
                (user_id,)
            )
            result = await cursor.fetchone()
            return result[0] if result else None
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–∫–∞–∑–∫–∏: {e}")
        return None
    finally:
        try:
            conn.close()
        except:
            pass


async def get_new_tales_num(user_id: int) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ tales.
    –í—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ user_id, –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è NULL.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tale_num –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
    """
    conn = await get_async_connection()
    try:
        async with conn.cursor() as cursor:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute(
                """
                UPDATE tales
                   SET cur_stage = tale_size
                 WHERE user_id = %s
                """,
                (user_id,)
            )
            # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω)
            await conn.commit()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏, –∫—Ä–æ–º–µ user_id, —Ä–∞–≤–Ω—ã–º–∏ NULL
            await cursor.execute(
                """
                INSERT INTO tales (user_id, tale_size, cur_stage, genre, hero, moral)
                     VALUES (%s,       %s,        %s,        %s,    %s,   %s)
                """,
                (user_id, None, None, None, None, None)
            )
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            await cursor.execute("SELECT LAST_INSERT_ID()")
            new_id = (await cursor.fetchone())[0]
            await conn.commit()
            return new_id
    finally:
        try:
            conn.close()
        except:
            pass


async def check_all_users():
    conn = await get_async_connection()
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT * FROM users")
        result = await cursor.fetchall()
        for row in result:
            print(row)
    conn.close()

async def add_tale_if_not(tale_num: int, tale_size: int):
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞–∑–∫–∏ —Å –∏–º–µ–Ω–µ–º —Ç–∞–±–ª–∏—Ü—ã
    table_map = {
        8: "small_tale",
        16: "medium_tale",
        32: "large_tale",
    }

    table_name = table_map.get(tale_size)
    if not table_name:
        print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞–∑–∫–∏: {tale_size!r}. –û–∂–∏–¥–∞—é—Ç—Å—è 8, 16 –∏–ª–∏ 32.")
        return

    conn = await get_async_connection()
    if not conn:
        print("‚ùå –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return

    try:
        async with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏
            await cursor.execute(
                f"SELECT tale_num FROM {table_name} WHERE tale_num = %s",
                (tale_num,),
            )
            exists = await cursor.fetchone()

            if not exists:
                print(f"–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ {table_name} –¥–ª—è tale_num={tale_num}")
                try:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ tale_num ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ NULL
                    await cursor.execute(
                        f"INSERT INTO {table_name} (tale_num) VALUES (%s)",
                        (tale_num,),
                    )
                    await conn.commit()
                    print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å tale_num={tale_num} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ {table_name}.")
                except Exception as insert_error:
                    print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ {table_name}: {insert_error}")
                    await conn.rollback()
            else:
                print(f"‚ÑπÔ∏è –ó–∞–ø–∏—Å—å —Å tale_num={tale_num} —É–∂–µ –µ—Å—Ç—å –≤ {table_name}.")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if conn and not conn.closed:
            conn.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")



async def add_data_to_tale(tale_num: int, prompt: str, tale_size: int):
    table_map = {
        8: ("small_tale", 8),
        16: ("medium_tale", 16),
        32: ("large_tale", 32),
    }

    if tale_size not in table_map:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞–∑–∫–∏: {tale_size}")
        return

    table_name, num_pairs = table_map[tale_size]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π p0, ans0, p1, ans1, ...
    fields = [f"p{i}" if j % 2 == 0 else f"ans{i}" for i in range(num_pairs) for j in range(2)]

    conn = await get_async_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        return

    try:
        async with conn.cursor() as cursor:
            await cursor.execute(f"SELECT * FROM {table_name} WHERE tale_num = %s", (tale_num,))
            row = await cursor.fetchone()

            if not row:
                print(f"‚ö† –ó–∞–ø–∏—Å—å —Å tale_num={tale_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {table_name}")
                return

            # row[0] ‚Äî —ç—Ç–æ tale_num, –¥–∞–ª—å—à–µ –∏–¥—É—Ç p0, ans0, ...
            for idx, field in enumerate(fields, start=1):
                if row[idx] is None:
                    await cursor.execute(
                        f"UPDATE {table_name} SET {field} = %s WHERE tale_num = %s",
                        (prompt, tale_num)
                    )
                    await conn.commit()
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {field} —Ç–∞–±–ª–∏—Ü—ã {table_name}")
                    return

            print(f"‚Ñπ –í—Å–µ –ø–æ–ª—è –≤ {table_name} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn and not conn.closed:
            conn.close()

async def get_user_context_tale(tale_num: int, tale_size: int):
    table_map = {
        8: ("small_tale", 8),
        16: ("medium_tale", 16),
        32: ("large_tale", 32),
    }

    if tale_size not in table_map:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞–∑–∫–∏: {tale_size}")
        return []

    table_name, num_pairs = table_map[tale_size]
    fields = [f"p{i}" if j % 2 == 0 else f"ans{i}" for i in range(num_pairs) for j in range(2)]

    conn = await get_async_connection()
    context = []

    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        return []

    try:
        async with conn.cursor() as cursor:
            await cursor.execute(f"SELECT * FROM {table_name} WHERE tale_num = %s", (tale_num,))
            result = await cursor.fetchone()
            if not result:
                print(f"‚ö† –ó–∞–ø–∏—Å—å —Å tale_num={tale_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {table_name}")
                return []

            for i, field in enumerate(fields):
                cell = result[i + 1]  # result[0] ‚Äî —ç—Ç–æ tale_num
                if cell is not None:
                    role = "user" if i % 2 == 0 else "assistant"
                    context.append({"role": role, "content": cell})
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    finally:
        if conn and not conn.closed:
            conn.close()

    return context


async def print_table(table_name: str):
    conn = await get_async_connection()
    async with conn.cursor() as cur:
        await cur.execute(f"SELECT * FROM {table_name}")
        rows = await cur.fetchall()
        headers = [desc[0] for desc in cur.description]

    MAX_CELL_WIDTH = 5
    col_widths = [MAX_CELL_WIDTH] * len(headers)

    def make_line(char="-", junction="+"):
        return junction + junction.join(char * (w + 2) for w in col_widths) + junction

    def format_row(row):
        return "| " + " | ".join(
            (str(cell) if cell is not None else "NULL")[:MAX_CELL_WIDTH].ljust(MAX_CELL_WIDTH)
            for cell in row
        ) + " |"

    print(f"mysql> SELECT * FROM {table_name};")
    print(make_line())
    print(format_row(headers))
    print(make_line())
    for row in rows:
        await asyncio.sleep(0)
        print(format_row(row))
    print(make_line())
